li      $v0, RESET_CORE_TIMER
    syscall

wait:
    li      $v0, READ_CORE_TIMER
    syscall
    blt     $v0, 200000, wait              # e.g. f = 100Hz

void delay(unsigned int ms) {
    resetCoreTimer();
    while (readCoreTimer() < 20000 * ms);
}

unsigned char toBcd(unsigned char value) 
{ 
    return ((value / 10) << 4) + (value % 10); 
}


// configure RB8-RB14 as outputs
// configure RD5-RD6 as outputs
TRISB &= 0x80FF;
TRISD &= 0xFF9F;

void send2displays(unsigned char value) 
{ 
    static const char disp7Scodes[16] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
    static char displayFlag = 0;

    int digit_low = toBcd(value) & 0x0F; 
    int digit_high = toBcd(value) >> 4;
    
    if (displayFlag == 0)
    {
        // select display low
        LATD = (LATD & 0xFF9F) | 0x0020;
        // send digit_low (dl) to display: 
        LATB = (LATB & 0x80FF) | (disp7Scodes[digit_low] << 8); 
    }
    else
    {
        // select display high
        LATD = (LATD & 0xFF9F) | 0x0040;
        // send digit_high (dh) to display: 
        LATB = (LATB & 0x80FF) | (disp7Scodes[digit_high] << 8); 
    }
    
    displayFlag = !displayFlag;

}

# Duas frequencias diferentes
# Contador com 5Hz e display com 50Hz
while(1) 
    { 
        i = 0; 
        do 
        { 
            send2displays(counter); 
            // wait 20 ms (1/50Hz)
            delay(20); 
        } while(++i < 10); // 10 * 20 ms = 200 ms (1/5Hz)
        // increment counter (mod 256)
        counter = (counter + 1) % 256; 
    }

if (displayCounter++ >= (freq / 50)) { //50Hz com frequencia variavel
            send2displays(print_value);
            displayCounter = 0; // Resetar o contador do display
}

#include <detpic32.h>

int main(void) { 
    // Configure the A/D module and port RB4 as analog input 

    TRISBbits.TRISB4 = 1;       // RB4 digital output disconnected 
    AD1PCFGbits.PCFG4= 0;       // RB4 configured as analog input 
    AD1CON1bits.SSRC = 7;       // Conversion trigger selection bits: in this 
                                //  mode an internal counter ends sampling and 
                                //  starts conversion 
    AD1CON1bits.CLRASAM = 1;    // Stop conversions when the 1st A/D converter 
                                //  interrupt is generated. At the same time, 
                                //  hardware clears the ASAM bit 
    AD1CON3bits.SAMC = 16;      // Sample time is 16 TAD (TAD = 100 ns) 
    AD1CON2bits.SMPI = 2-1;     // Interrupt is generated after N samples 
                                //  (replace N by the desired number of 
                                //  consecutive samples) 
    AD1CHSbits.CH0SA = 4;       // replace x by the desired input  
                                //  analog channel (0 to 15) 
    AD1CON1bits.ON = 1;         // Enable A/D converter 
                                //  This must the last command of the A/D 
                                //  configuration sequence

    while(1) 
    { 
        // Start conversion 
        AD1CON1bits.ASAM = 1;
        // Wait while conversion not done (AD1IF == 0) 
        while( IFS1bits.AD1IF == 0 );
        // Read conversion result (ADC1BUF0 value) and print it 

        printInt(ADC1BUF0, 16 | 3 << 16);
        putChar('\n');

 
        // Reset AD1IF 
        IFS1bits.AD1IF = 0;
    } 
    return 0; 
}

int freq = 1 + (ADC1BUF0 * 4) / 1023;   // Mapeia [0, 1023] para [1, 5] Hz
int delayMs = 1000 / freq;              // Calcula o delay em ms para a frequÃªncia